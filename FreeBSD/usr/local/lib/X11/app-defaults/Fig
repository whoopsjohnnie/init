!Don't change the following string - xfig uses it to determine
! if you have the newest app-defaults files installed

Fig.version:			3.2.0-beta4

! some sample settings you may want to change

! Image editor - can edit imported image
Fig.image_editor:		xv -rw

! Spacing between buttons
Fig.internalborderwidth:	2

! font for the buttons
Fig.buttonFont:			6x13

! font for the rulers and message window
Fig.normalFont:			6x13

! font for the file name and popup query widgets
Fig.boldFont:			8x13bold

! font for the ruler numbers
Fig*topruler.font:		6x13
Fig*sideruler.font:		6x13

! font for the units box in the corner where the rulers meet
Fig*unitbox.font:		6x13

! font for everything else
Fig*Font:			7x13bold

! the following should fix the problem that some have had with
! their window manager fighting with xfig over the geometry
Fig*allowShellResize:		False

! filename mask for the file popup browser
Fig*file_panel*mask*string:	*.fig*

! default export language
Fig.exportLanguage:		eps

! filename mask for the export popup browser
Fig*export_panel*mask*string:	*ps

! filename mask for the image popup browser
Fig*browse_panel*mask*string:	*.[gjxep][ipbc][fgmsx]*

! printer name
! If the following resource is NOT set, xfig will use the PRINTER 
! shell environment variable for the printer name
!Fig*printer*string:		ps

! printer job parameters
! If you are running a SYSV system your print command may need -T PS.  If so,
! uncomment the following.  You may want to add any print params here anyway.
! If you want the filename to be sent to the printer for the "Job" parameter
! you may add -J %f to the job_params string.

!Fig*job_params*string:		-T PS


! Set the maximum number of colors to use for color images (EPS,GIF,XPM)
! xfig will try to install a private colormap if needed to get this
! nubmer of colors UNLESS -dontswitchcmap (resource Fig.dont_switch_cmap)
! is set.
Fig.max_image_colors:		80

! If you are using the 3d Athena widget set (which looks very nice)
! and you want the scrollbars to be 3d (even though they look funny)
! then comment out the following three resources.
! NOTE:
! There are two names for top/bottom shadow colors (e.g. topShadow and 
! topShadowPixel) because the resources changed in version 1.1 of Xaw3d.
! (Version 1.1 uses xxxShadowPixel).
! I include both for compatibility.  Be sure to change both values when
! modifying them.

	Fig*horizontal.shadowWidth: 0
	Fig*horizontal.topShadowPixel: black
	Fig*horizontal.bottomShadowPixel: white
	Fig*horizontal.topShadow: black
	Fig*horizontal.bottomShadow: white
! the following is done so the widget set doesn't try to make shades of
! the scrollbar shadows (even though the width is 0 it takes more colors)
	Fig*Scrollbar.shadowWidth: 0
	Fig*Scrollbar.topShadow: black
	Fig*Scrollbar.bottomShadow: white
	Fig*Scrollbar.topShadowPixel: black
	Fig*Scrollbar.bottomShadowPixel: white
! this is for the standard color buttons in the color panel
	Fig*stdColor.shadowWidth: 0
	Fig*stdColor.topShadow: black
	Fig*stdColor.bottomShadow: white
	Fig*stdColor.topShadowPixel: black
	Fig*stdColor.bottomShadowPixel: white
! You may need or want to adjust the highlight thickness for the mode
! and indicator panels depending on the results.  If it is too thick
! it will erase part of the button graphics.
	Fig*mode_panel*highlightThickness: 1
	Fig*ind_panel.ind_box.button_form.button.highlightThickness: 1
! The following is for the update marker in the upper-right corner of the
! indicator buttons.  You may not want any highlight thickness because
! the boxes are so small.
	Fig*ind_panel.ind_box.button_form.update.highlightThickness: 0

!if on monochrome server, or no Fig-color app-defaults file
#ifndef COLOR
!  This background resource shows between the buttons like a border
	Fig*mode_panel.background:	black
	Fig*mode_panel.foreground:	black
#endif

! make the F20 key paste text in the canvas
Fig*canvas.translations: #override \n\
			<Key>F20: PasteCanv()\n

! Specify a private Compose key database file.  If this resource contains a "/"
! then the wired-in name of the xfig global directory won't be prefixed to it.
! An initial "~/" is replaced by the value of "$HOME/".
!
!Fig*keyFile:	~/.xfig.Compose-key

! keyboard accelerators


Fig*accelerators: \
	Meta<Key>h: Search()\n\
	Meta<Key>d: delete_all()\n\
	Meta<Key>n: new()\n\
	Meta<Key>o: orient()\n\
	Meta<Key>u: undo()\n\
	Meta<Key>r: redraw()\n\
	Ctrl<Key>l: redraw()\n\
	Meta<Key>t: paste()\n\
	Meta<Key>s: SaveFile()\n\
	Meta<Key>l: LoadFile()\n
!
! The following accelerators must be in the Fig*XXX*accelerators hierarchy
! or the Quit button looks like it has been activated when the user uses
! an accelerator like Alt-F (popup file panel)
!
Fig*quit*accelerators: \
	Meta<Key>q: quit()\n
Fig*file*accelerators: \
	Meta<Key>f: file()\n
Fig*export*accelerators: \
	Meta<Key>e: popup_export()\n
Fig*print*accelerators: \
	Meta<Key>p: popup_print()\n
Fig*file_menu*accelerators: \
	Meta<Key>c: file_cancel()\n\
	Meta<Key>l: load()\n\
	Meta<Key>m: merge()\n\
	Meta<Key>r: rescan()\n\
	Meta<Key>s: save()\n
Fig*export_menu*accelerators: \
	Meta<Key>c: export_cancel()\n\
	Meta<Key>e: export()\n\
	Meta<Key>r: rescan()\n
Fig*print_menu*accelerators: \
	Meta<Key>c: dismiss()\n\
	Meta<Key>d: dismiss()\n\
	Meta<Key>b: print_batch()\n\
	Meta<Key>x: clear_batch()\n\
	Meta<Key>p: print()\n
Fig*set_unit_panel*accelerators: \
	Meta<Key>c: QuitUnits()\n\
	Meta<Key>s: SetUnits()\n\
	<Key>Return: SetUnits()\n
Fig*ind_panel*accelerators: \
	Shift<Key>z: ZoomIn()\n\
	<Key>z: ZoomOut()\n
Fig*mode_panel*accelerators: \
	None<Key>m: ModeMoveObject()\n\
	Ctrl<Key>c: ModeCopyObject()\n\
	None<Key>a: ModeAlign()\n\
	Ctrl<Key>s: ModeScale()\n\
	None<Key>d: ModeDeleteObject()\n\
	Shift<Key>d: ModeDeletePoint()\n\
	Shift<Key>m: ModeMovePoint()\n\
	Ctrl<Key>e: ModeEditObject()\n\
	None<Key>g: ModeCompound()\n\
	Shift<Key>g: ModeBreakCompound()\n\
	None<Key>o: ModeOpenCompound()\n\
	Ctrl<Key>r: ModeRotateObjectCW()\n\
	Shift<Key>r: ModeRotateObjectCCW()\n\
	None<Key>f: ModeFlipObjectUD()\n\
	Shift<Key>f: ModeFlipObjectLR()\n\
	Shift<Key>a: ModeArrow()\n\
	Ctrl<Key>A: ModeAddPoint()\n\
	None<Key>l: ModeLine()\n\
	None<Key>t: ModeText()\n\
	None<Key>c: ModeCircleR()\n\
	Shift<Key>c: ModeCircleD()\n\
	None<Key>e: ModeEllipseR()\n\
	Shift<Key>e: ModeEllipseD()\n\
	None<Key>b: ModeBox()\n\
	Shift<Key>b: ModeArcBox()\n\
	None<Key>p: ModePoly()\n\
	Shift<Key>p: ModeRegPoly()\n\
	Ctrl<Key>p: ModePIC()\n\
	None<Key>r: ModeArc()\n\
	None<Key>s: ModeSpline()\n\
	Shift<Key>s: ModeClSpline()\n\
	None<Key>i: ModeIntSpline()\n\
	Shift<Key>i: ModeClIntSpline()\n\
	None<Key>u: ModeUpdateObject()\n\
	None<Key>v: ModeConvertObject()\n
